# ========================================
# PRODUCTION DOCKERFILE - RIDE SHARE BACKEND
# ========================================

# Production Dockerfile for Backend API
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install system dependencies for build
RUN apk add --no-cache \
    postgresql-client \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Create production build (if needed)
RUN npm run build || true

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Stage 2: Production stage
FROM node:18-alpine AS production

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Install production dependencies only
RUN apk add --no-cache \
    postgresql-client \
    curl \
    bash \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=nodejs:nodejs /app ./

# Create necessary directories with proper permissions
RUN mkdir -p logs backups && \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Create health check script
RUN echo '#!/bin/bash\ncurl -f http://localhost:3000/health || exit 1' > /healthcheck.sh && \
    chmod +x /healthcheck.sh

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD ["/healthcheck.sh"]

# Start production server
CMD ["npm", "start"] 